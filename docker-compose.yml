version: '3'

services:
  rabbitmq:
    container_name: rabbitmq
    hostname: rabbitmq
    image: rabbitmq:latest
    networks:
      - main
    ports:
      - "5672:5672"
    restart: on-failure

  db:
    image: postgres:latest
    hostname: db
    env_file:
      - config/db/database1_env
    volumes:
      - database1_volume:/var/lib/postgresql/data
    networks:
      - main
    ports:
      - "5432:5432"
    
  app:
    build:
      context: .
      dockerfile: config/app/Dockerfile
    command: sh /config/on-container-start.sh
    hostname: app
    volumes:
      - ./app:/app
      - static:/srv/static
      - media:/srv/media
    networks:
      - main
    image: crawlzero
    expose:
      - "8000"
    depends_on:
      - db
      - rabbitmq
    links:
      - db:db
    environment:
      - DJANGO_SETTINGS_MODULE=myproject.settings_dev
  nginx:
    image: nginx:latest
    hostname: nginx
    ports:
      - "8000:8000"
    volumes:
      - ./config/nginx:/etc/nginx/conf.d
      - static:/srv/static
      - media:/srv/media
    depends_on:
      - app
    networks:
      - main

  celery_worker:
    command: sh -c "celery -A myproject worker -l info"
    container_name: celery_worker
    depends_on:
      - app
      - db
      - rabbitmq
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.50'
          memory: 50M
        reservations:
          cpus: '0.25'
          memory: 20M
    hostname: celery_worker
    image: crawlzero
    networks:
      - main
    restart: on-failure

  celery_beat:
    command: sh -c "celery -A myproject beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler"
    container_name: celery_beat
    depends_on:
      - app
      - db
      - rabbitmq
    hostname: celery_beat
    image: crawlzero
    networks:
      - main
    restart: on-failure



networks: 
  main:

volumes:
  database1_volume:
  static:
  media:
